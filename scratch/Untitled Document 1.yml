apiVersion: v1
kind: Pod
metadata:
  name: kafka-0
  generateName: kafka-
  namespace: default
  uid: fc72f945-403a-4f71-b682-42d066d0dee8
  resourceVersion: '3271'
  creationTimestamp: '2022-11-15T16:21:09Z'
  labels:
    app.kubernetes.io/component: kafka
    app.kubernetes.io/instance: kafka
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: kafka
    controller-revision-hash: kafka-7d498c4f7c
    helm.sh/chart: kafka-19.0.1
    statefulset.kubernetes.io/pod-name: kafka-0
  annotations:
    checksum/scripts: 99cd3930b363e9bae23eccfb5b6407fc94ea856cc2b0ae6d9f8b820c64a6dc10
  ownerReferences:
    - apiVersion: apps/v1
      kind: StatefulSet
      name: kafka
      uid: c2faa3f9-9b6e-4c6c-bfef-44b28c6db910
      controller: true
      blockOwnerDeletion: true
  managedFields:
    - manager: kube-controller-manager
      operation: Update
      apiVersion: v1
      time: '2022-11-15T16:21:09Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:checksum/scripts: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/instance: {}
            f:app.kubernetes.io/managed-by: {}
            f:app.kubernetes.io/name: {}
            f:controller-revision-hash: {}
            f:helm.sh/chart: {}
            f:statefulset.kubernetes.io/pod-name: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"c2faa3f9-9b6e-4c6c-bfef-44b28c6db910"}: {}
        f:spec:
          f:affinity:
            .: {}
            f:podAntiAffinity:
              .: {}
              f:preferredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"kafka"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"ALLOW_PLAINTEXT_LISTENER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"BITNAMI_DEBUG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_AUTHORIZER_CLASS_NAME"}:
                  .: {}
                  f:name: {}
                k:{"name":"KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_DEFAULT_REPLICATION_FACTOR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_DELETE_TOPIC_ENABLE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_LISTENERS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_LOG_DIRS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_LOG_FLUSH_INTERVAL_MS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_LOG_RETENTION_BYTES"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_LOG_RETENTION_HOURS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_LOG_SEGMENT_BYTES"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_MESSAGE_MAX_BYTES"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_NUM_IO_THREADS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_NUM_NETWORK_THREADS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_NUM_PARTITIONS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_SUPER_USERS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_ZOOKEEPER_CONNECT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_HEAP_OPTS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_INTER_BROKER_LISTENER_NAME"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_LOG_DIR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_VOLUME_DIR"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"KAFKA_ZOOKEEPER_PROTOCOL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"MY_POD_IP"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"MY_POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"SHARED_FILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:tcpSocket:
                  .: {}
                  f:port: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":9092,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9093,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9094,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:tcpSocket:
                  .: {}
                  f:port: {}
                f:timeoutSeconds: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:runAsNonRoot: {}
                f:runAsUser: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/bitnami/kafka"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/opt/bitnami/kafka/logs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/scripts/setup.sh"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:subPath: {}
                k:{"mountPath":"/shared"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostname: {}
          f:initContainers:
            .: {}
            k:{"name":"auto-discovery"}:
              .: {}
              f:command: {}
              f:env:
                .: {}
                k:{"name":"MY_POD_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef: {}
                k:{"name":"SHARED_FILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/opt/bitnami/kafka/logs"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/scripts/auto-discovery.sh"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:subPath: {}
                k:{"mountPath":"/shared"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext:
            .: {}
            f:fsGroup: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:subdomain: {}
          f:terminationGracePeriodSeconds: {}
          f:volumes:
            .: {}
            k:{"name":"data"}:
              .: {}
              f:name: {}
              f:persistentVolumeClaim:
                .: {}
                f:claimName: {}
            k:{"name":"logs"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
            k:{"name":"scripts"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"shared"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
    - manager: kube-scheduler
      operation: Update
      apiVersion: v1
      time: '2022-11-15T16:21:09Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
      subresource: status
    - manager: kubelet
      operation: Update
      apiVersion: v1
      time: '2022-11-15T16:21:10Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:startTime: {}
      subresource: status
  selfLink: /api/v1/namespaces/default/pods/kafka-0
status:
  phase: Pending
  conditions:
    - type: Initialized
      status: 'False'
      lastProbeTime: null
      lastTransitionTime: '2022-11-15T16:21:10Z'
      reason: ContainersNotInitialized
      message: 'containers with incomplete status: [auto-discovery]'
    - type: Ready
      status: 'False'
      lastProbeTime: null
      lastTransitionTime: '2022-11-15T16:21:10Z'
      reason: ContainersNotReady
      message: 'containers with unready status: [kafka]'
    - type: ContainersReady
      status: 'False'
      lastProbeTime: null
      lastTransitionTime: '2022-11-15T16:21:10Z'
      reason: ContainersNotReady
      message: 'containers with unready status: [kafka]'
    - type: PodScheduled
      status: 'True'
      lastProbeTime: null
      lastTransitionTime: '2022-11-15T16:21:10Z'
  hostIP: 192.168.49.2
  startTime: '2022-11-15T16:21:10Z'
  initContainerStatuses:
    - name: auto-discovery
      state:
        waiting:
          reason: PodInitializing
      lastState: {}
      ready: false
      restartCount: 0
      image: docker.io/bitnami/kubectl:1.25.2-debian-11-r6
      imageID: ''
  containerStatuses:
    - name: kafka
      state:
        waiting:
          reason: PodInitializing
      lastState: {}
      ready: false
      restartCount: 0
      image: docker.io/bitnami/kafka:3.3.1-debian-11-r1
      imageID: ''
      started: false
  qosClass: BestEffort
spec:
  volumes:
    - name: data
      persistentVolumeClaim:
        claimName: data-kafka-0
    - name: scripts
      configMap:
        name: kafka-scripts
        defaultMode: 493
    - name: shared
      emptyDir: {}
    - name: logs
      emptyDir: {}
    - name: kube-api-access-jqzjp
      projected:
        sources:
          - serviceAccountToken:
              expirationSeconds: 3607
              path: token
          - configMap:
              name: kube-root-ca.crt
              items:
                - key: ca.crt
                  path: ca.crt
          - downwardAPI:
              items:
                - path: namespace
                  fieldRef:
                    apiVersion: v1
                    fieldPath: metadata.namespace
        defaultMode: 420
  initContainers:
    - name: auto-discovery
      image: docker.io/bitnami/kubectl:1.25.2-debian-11-r6
      command:
        - /scripts/auto-discovery.sh
      env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: SHARED_FILE
          value: /shared/info.txt
      resources: {}
      volumeMounts:
        - name: shared
          mountPath: /shared
        - name: logs
          mountPath: /opt/bitnami/kafka/logs
        - name: scripts
          mountPath: /scripts/auto-discovery.sh
          subPath: auto-discovery.sh
        - name: kube-api-access-jqzjp
          readOnly: true
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
  containers:
    - name: kafka
      image: docker.io/bitnami/kafka:3.3.1-debian-11-r1
      command:
        - /scripts/setup.sh
      ports:
        - name: kafka-client
          containerPort: 9092
          protocol: TCP
        - name: kafka-internal
          containerPort: 9093
          protocol: TCP
        - name: kafka-external
          containerPort: 9094
          protocol: TCP
      env:
        - name: BITNAMI_DEBUG
          value: 'false'
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: KAFKA_CFG_ZOOKEEPER_CONNECT
          value: kafka-zookeeper
        - name: KAFKA_INTER_BROKER_LISTENER_NAME
          value: INTERNAL
        - name: KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP
          value: INTERNAL:PLAINTEXT,CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
        - name: KAFKA_CFG_LISTENERS
          value: INTERNAL://:9093,CLIENT://:9092,EXTERNAL://:9094
        - name: SHARED_FILE
          value: /shared/info.txt
        - name: ALLOW_PLAINTEXT_LISTENER
          value: 'yes'
        - name: KAFKA_ZOOKEEPER_PROTOCOL
          value: PLAINTEXT
        - name: KAFKA_VOLUME_DIR
          value: /bitnami/kafka
        - name: KAFKA_LOG_DIR
          value: /opt/bitnami/kafka/logs
        - name: KAFKA_CFG_DELETE_TOPIC_ENABLE
          value: 'false'
        - name: KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE
          value: 'true'
        - name: KAFKA_HEAP_OPTS
          value: '-Xmx1024m -Xms1024m'
        - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MESSAGES
          value: '10000'
        - name: KAFKA_CFG_LOG_FLUSH_INTERVAL_MS
          value: '1000'
        - name: KAFKA_CFG_LOG_RETENTION_BYTES
          value: '1073741824'
        - name: KAFKA_CFG_LOG_RETENTION_CHECK_INTERVAL_MS
          value: '300000'
        - name: KAFKA_CFG_LOG_RETENTION_HOURS
          value: '168'
        - name: KAFKA_CFG_MESSAGE_MAX_BYTES
          value: '1000012'
        - name: KAFKA_CFG_LOG_SEGMENT_BYTES
          value: '1073741824'
        - name: KAFKA_CFG_LOG_DIRS
          value: /bitnami/kafka/data
        - name: KAFKA_CFG_DEFAULT_REPLICATION_FACTOR
          value: '1'
        - name: KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: '1'
        - name: KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR
          value: '1'
        - name: KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR
          value: '1'
        - name: KAFKA_CFG_NUM_IO_THREADS
          value: '8'
        - name: KAFKA_CFG_NUM_NETWORK_THREADS
          value: '3'
        - name: KAFKA_CFG_NUM_PARTITIONS
          value: '1'
        - name: KAFKA_CFG_NUM_RECOVERY_THREADS_PER_DATA_DIR
          value: '1'
        - name: KAFKA_CFG_SOCKET_RECEIVE_BUFFER_BYTES
          value: '102400'
        - name: KAFKA_CFG_SOCKET_REQUEST_MAX_BYTES
          value: '104857600'
        - name: KAFKA_CFG_SOCKET_SEND_BUFFER_BYTES
          value: '102400'
        - name: KAFKA_CFG_ZOOKEEPER_CONNECTION_TIMEOUT_MS
          value: '6000'
        - name: KAFKA_CFG_AUTHORIZER_CLASS_NAME
        - name: KAFKA_CFG_ALLOW_EVERYONE_IF_NO_ACL_FOUND
          value: 'true'
        - name: KAFKA_CFG_SUPER_USERS
          value: User:admin
      resources: {}
      volumeMounts:
        - name: data
          mountPath: /bitnami/kafka
        - name: logs
          mountPath: /opt/bitnami/kafka/logs
        - name: scripts
          mountPath: /scripts/setup.sh
          subPath: setup.sh
        - name: shared
          mountPath: /shared
        - name: kube-api-access-jqzjp
          readOnly: true
          mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      livenessProbe:
        tcpSocket:
          port: kafka-client
        initialDelaySeconds: 10
        timeoutSeconds: 5
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 3
      readinessProbe:
        tcpSocket:
          port: kafka-client
        initialDelaySeconds: 5
        timeoutSeconds: 5
        periodSeconds: 10
        successThreshold: 1
        failureThreshold: 6
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      imagePullPolicy: IfNotPresent
      securityContext:
        runAsUser: 1001
        runAsNonRoot: true
        allowPrivilegeEscalation: false
  restartPolicy: Always
  terminationGracePeriodSeconds: 30
  dnsPolicy: ClusterFirst
  serviceAccountName: kafka
  serviceAccount: kafka
  nodeName: minikube
  securityContext:
    fsGroup: 1001
  hostname: kafka-0
  subdomain: kafka-headless
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 1
          podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/component: kafka
                app.kubernetes.io/instance: kafka
                app.kubernetes.io/name: kafka
            namespaces:
              - default
            topologyKey: kubernetes.io/hostname
  schedulerName: default-scheduler
  tolerations:
    - key: node.kubernetes.io/not-ready
      operator: Exists
      effect: NoExecute
      tolerationSeconds: 300
    - key: node.kubernetes.io/unreachable
      operator: Exists
      effect: NoExecute
      tolerationSeconds: 300
  priority: 0
  enableServiceLinks: true
  preemptionPolicy: PreemptLowerPriority

